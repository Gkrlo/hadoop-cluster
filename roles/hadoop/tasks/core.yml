---
# Download (only if not downloaded yet) & Install
- name: Hadoop | Verify tar.gz is already downloaded
  stat:
    path: "/tmp/hadoop-{{ hadoop_version }}.tar.gz"
  register: st_hadoop_downloaded

- name: Hadoop | Download hadoop
  get_url:
    url: "{{ hadoop_download_url }}"
    dest: /tmp/
    remote_src: yes
    validate_certs: no
  when: st_hadoop_downloaded.stat.exists == False

- name: Hadoop | Unzip hadoop package
  unarchive:
    src: "/tmp/hadoop-{{ hadoop_version }}.tar.gz"
    dest: /opt/
    group: "{{ hadoop_user }}"
    owner: "{{ hadoop_user }}"
    copy: no


# Set envs variables in ~/.bashrc & profile
- name: Hadoop | Remove hadoop env vars
  lineinfile:
    path: "/home/{{ hadoop_user }}/.bashrc"
    regexp: "^{{item['prefix']}}"
    state: absent
  with_items: "{{ hadoop_env_vars }}"

- name: Hadoop | Add hadoop envs ~/.bashrc
  lineinfile:
    path: "/home/{{ hadoop_user }}/.bashrc"
    line: "{{ item['prefix']+item['sufix'] }}"
    insertafter: EOF
    state: present
  with_items: "{{ hadoop_env_vars }}"

- name: Hadoop | Add hadoop envs /etc/profile
  shell: "cp /home/{{ hadoop_user }}/.bashrc /etc/profile"
  args:
    executable: /bin/bash

- name: Hadoop | Add hadoop envs ~/.profile
  shell: "cp /home/{{ hadoop_user }}/.bashrc ~/.profile"
  args:
    executable: /bin/bash


# Config files
- name: Hadoop | Remove conf env vars in hadoop-env
  lineinfile:
    path: "{{ hadoop_home }}/etc/hadoop/hadoop-env.sh"
    regexp: "^{{ item['prefix'] }}"
    state: absent
  with_items: "{{ hadoop_conf_env_vars }}"

- name: Hadoop | Set conf env vars in hadoop-env
  lineinfile:
    path: "{{ hadoop_home }}/etc/hadoop/hadoop-env.sh"
    line: "{{ item['prefix'] + item['sufix'] }}"
    insertbefore: BOF
    state: present
  with_items: "{{ hadoop_conf_env_vars }}"
  
- name: Hadoop | Overwrite core-site.xml
  template:
    src: core-site.xml.j2
    dest: "{{ hadoop_home }}/etc/hadoop/core-site.xml"
    force: yes

- name: Hadoop | Overwrite hdfs-site.xml
  template:
    src: hdfs-site.xml.j2
    dest: "{{ hadoop_home }}/etc/hadoop/hdfs-site.xml"
    force: yes

- name: Hadoop | Overwrite mapred-site.xml
  template:
    src: mapred-site.xml.j2
    dest: "{{ hadoop_home }}/etc/hadoop/mapred-site.xml"
    force: yes

- name: Hadoop | Overwrite yarn-site.xml
  template:
    src: yarn-site.xml.j2
    dest: "{{ hadoop_home }}/etc/hadoop/yarn-site.xml"
    force: yes

# Hadoop folders
- name: Hadoop | Verify the namenode dir
  stat:
    path: "{{ hadoop_namenode_dir }}"
  register: st_namenode_dir

- name: Hadoop | Create namenode dir
  file:
    path: "{{ hadoop_namenode_dir }}"
    state: directory
    group: "{{ hadoop_user }}"
    owner: "{{ hadoop_user }}"
  when: st_namenode_dir.stat.exists == False

- name: Hadoop | Verify the namesecondary dir
  stat:
    path: "{{ hadoop_namesecondary_dir }}"
  register: st_namesecondary_dir

- name: Hadoop | Create namesecondary dir
  file:
    path: "{{ hadoop_namesecondary_dir }}"
    state: directory
    group: "{{ hadoop_user }}"
    owner: "{{ hadoop_user }}"
  when: st_namesecondary_dir.stat.exists == False

- name: Hadoop | Verify the datanode dir
  stat:
    path: "{{ hadoop_datanode_dir }}"
  register: st_datanode_dir

- name: Hadoop | Create datanode dir
  file:
    path: "{{ hadoop_datanode_dir }}"
    state: directory
    group: "{{ hadoop_user }}"
    owner: "{{ hadoop_user }}"
  when: st_datanode_dir.stat.exists == False 